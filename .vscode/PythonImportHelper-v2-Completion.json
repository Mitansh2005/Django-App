[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "project.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "project.validators",
        "description": "project.validators",
        "detail": "project.validators",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "custom_page",
        "importPath": "project.views",
        "description": "project.views",
        "isExtraImport": true,
        "detail": "project.views",
        "documentation": {}
    },
    {
        "label": "generate_quote",
        "importPath": "project.views",
        "description": "project.views",
        "isExtraImport": true,
        "detail": "project.views",
        "documentation": {}
    },
    {
        "label": "user_form",
        "importPath": "project.views",
        "description": "project.views",
        "isExtraImport": true,
        "detail": "project.views",
        "documentation": {}
    },
    {
        "label": "form_success_view",
        "importPath": "project.views",
        "description": "project.views",
        "isExtraImport": true,
        "detail": "project.views",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.project.migrations.0001_initial",
        "description": "task.project.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserForm',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "task.project.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.project.migrations.0002_alter_userform_name_alter_userform_phone_number_and_more",
        "description": "task.project.migrations.0002_alter_userform_name_alter_userform_phone_number_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('project', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userform',\n            name='name',\n            field=models.CharField(max_length=100, validators=[project.validators.validate_no_special_characters]),\n        ),",
        "detail": "task.project.migrations.0002_alter_userform_name_alter_userform_phone_number_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "task.project.migrations.0003_alter_userform_name_alter_userform_phone_number_and_more",
        "description": "task.project.migrations.0003_alter_userform_name_alter_userform_phone_number_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('project', '0002_alter_userform_name_alter_userform_phone_number_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='userform',\n            name='name',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "task.project.migrations.0003_alter_userform_name_alter_userform_phone_number_and_more",
        "documentation": {}
    },
    {
        "label": "UserFormAdmin",
        "kind": 6,
        "importPath": "task.project.admin",
        "description": "task.project.admin",
        "peekOfCode": "class UserFormAdmin(admin.ModelAdmin):\n  list_display=[\"id\",\"name\",\"surname\",\"date_of_birth\",\"email\",\"phone_number\"]\n  sortable_by=[\"name\"]\n  list_filter=[\"date_of_birth\"]\nadmin.site.register(UserForm,UserFormAdmin)",
        "detail": "task.project.admin",
        "documentation": {}
    },
    {
        "label": "ProjectConfig",
        "kind": 6,
        "importPath": "task.project.apps",
        "description": "task.project.apps",
        "peekOfCode": "class ProjectConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'project'",
        "detail": "task.project.apps",
        "documentation": {}
    },
    {
        "label": "UserInfoForm",
        "kind": 6,
        "importPath": "task.project.forms",
        "description": "task.project.forms",
        "peekOfCode": "class UserInfoForm(forms.Form):\n    name = forms.CharField(max_length=100,validators=[validate_no_special_characters])\n    surname = forms.CharField(max_length=100,validators=[validate_no_special_characters])\n    dob = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))\n    email = forms.EmailField()\n    phone = forms.CharField(max_length=10,validators=[validate_phone_number])",
        "detail": "task.project.forms",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "task.project.models",
        "description": "task.project.models",
        "peekOfCode": "class UserForm(models.Model):\n    name=models.CharField(max_length=100)\n    surname=models.CharField(max_length=100)\n    date_of_birth=models.DateField()\n    email=models.EmailField()\n    phone_number=models.CharField(max_length=10)\n    def __str__(self):\n        return f\"{self.name} {self.surname}\"",
        "detail": "task.project.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "task.project.urls",
        "description": "task.project.urls",
        "peekOfCode": "urlpatterns = [\n    path('index/',custom_page,name=\"render_html\"),\n    path('quote/',generate_quote,name=\"quote-generator\"),\n    path('forms/',user_form,name=\"forms\"),\n    path('success/',form_success_view,name=\"form-success\")\n]",
        "detail": "task.project.urls",
        "documentation": {}
    },
    {
        "label": "validate_no_special_characters",
        "kind": 2,
        "importPath": "task.project.validators",
        "description": "task.project.validators",
        "peekOfCode": "def validate_no_special_characters(value):\n    print(f\"Validating: {value}\")  # Debug print\n    # Define a regular expression pattern to check for special characters\n    if not re.match(\"^[A-Za-z0-9]*$\", value):\n        raise ValidationError('This field cannot contain special characters.')\ndef validate_phone_number(value):\n    print(f\"Validating: {value}\")  # Debug print\n    \"\"\"Validator to check that phone number contains only digits.\"\"\"\n    if not re.match(\"^[0-9]*$\", value):\n        raise ValidationError('The phone number must contain only digits.')",
        "detail": "task.project.validators",
        "documentation": {}
    },
    {
        "label": "validate_phone_number",
        "kind": 2,
        "importPath": "task.project.validators",
        "description": "task.project.validators",
        "peekOfCode": "def validate_phone_number(value):\n    print(f\"Validating: {value}\")  # Debug print\n    \"\"\"Validator to check that phone number contains only digits.\"\"\"\n    if not re.match(\"^[0-9]*$\", value):\n        raise ValidationError('The phone number must contain only digits.')",
        "detail": "task.project.validators",
        "documentation": {}
    },
    {
        "label": "custom_page",
        "kind": 2,
        "importPath": "task.project.views",
        "description": "task.project.views",
        "peekOfCode": "def custom_page(request):\n    return render(request, \"project/index.html\")\ndef generate_quote(request):\n    choice = random.randint(0, 9)\n    selected_quote = quotes[choice]\n    print(selected_quote)\n    context = {\"quotes\": selected_quote}\n    return render(request, \"project/quote.html\", context)\ndef user_form(request):\n    if request.method == \"POST\":",
        "detail": "task.project.views",
        "documentation": {}
    },
    {
        "label": "generate_quote",
        "kind": 2,
        "importPath": "task.project.views",
        "description": "task.project.views",
        "peekOfCode": "def generate_quote(request):\n    choice = random.randint(0, 9)\n    selected_quote = quotes[choice]\n    print(selected_quote)\n    context = {\"quotes\": selected_quote}\n    return render(request, \"project/quote.html\", context)\ndef user_form(request):\n    if request.method == \"POST\":\n        form = UserInfoForm(request.POST)\n        if form.is_valid():",
        "detail": "task.project.views",
        "documentation": {}
    },
    {
        "label": "user_form",
        "kind": 2,
        "importPath": "task.project.views",
        "description": "task.project.views",
        "peekOfCode": "def user_form(request):\n    if request.method == \"POST\":\n        form = UserInfoForm(request.POST)\n        if form.is_valid():\n            user_info = UserForm(\n                name=form.cleaned_data['name'],\n                surname=form.cleaned_data['surname'],\n                date_of_birth=form.cleaned_data['dob'],\n                email=form.cleaned_data['email'],\n                phone_number=form.cleaned_data['phone']",
        "detail": "task.project.views",
        "documentation": {}
    },
    {
        "label": "form_success_view",
        "kind": 2,
        "importPath": "task.project.views",
        "description": "task.project.views",
        "peekOfCode": "def form_success_view(request):\n    return render(request, 'project/success.html')",
        "detail": "task.project.views",
        "documentation": {}
    },
    {
        "label": "quotes",
        "kind": 5,
        "importPath": "task.project.views",
        "description": "task.project.views",
        "peekOfCode": "quotes = [\n    {\n        \"quote\": \"The only way to do great work is to love what you do.\",\n        \"author\": \"Steve Jobs\",\n    },\n    {\n        \"quote\": \"Success is not final, failure is not fatal: It is the courage to continue that counts.\",\n        \"author\": \"Winston Churchill\",\n    },\n    {",
        "detail": "task.project.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "task.task.asgi",
        "description": "task.task.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "task.task.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-r3ff!bl&=l13)4#f4#o+gk=0nd2d)fz4jv2z*68-n97i9xj7z4\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-r3ff!bl&=l13)4#f4#o+gk=0nd2d)fz4jv2z*68-n97i9xj7z4\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"project\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"project\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"project\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"project\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\nMIDDLEWARE = [",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"task.urls\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "ROOT_URLCONF = \"task.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [f\"{BASE_DIR}/templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [f\"{BASE_DIR}/templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "WSGI_APPLICATION = \"task.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "task.task.settings",
        "description": "task.task.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "task.task.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "task.task.urls",
        "description": "task.task.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('project.urls'))\n]",
        "detail": "task.task.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "task.task.wsgi",
        "description": "task.task.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "task.task.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "task.manage",
        "description": "task.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'task.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "task.manage",
        "documentation": {}
    }
]